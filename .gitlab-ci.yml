# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/C++.gitlab-ci.yml

# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/

# run tests using the binary built before
#test:
#  stage: test
#  script:
#    - ./runmytests.sh

build-latex:
    stage: build
    image: registry.gitlab.com/islandoftex/images/texlive:latest

    script:
     - cd latex
     - pdflatex thesis.tex
     - bibtex thesis
     - pdflatex thesis.tex
     #- biber literatur.bib
    # - pdflatex thesis.tex
    #after_script:
    # - cat latex/thesis.log
    artifacts:
     paths:
      - latex/thesis.pdf


build:
    stage: build
    image: gcc
    before_script:
     - git submodule sync --recursive
     - git submodule update --init --recursive
     - apt-get update --yes
     - apt-get install --yes cmake libarmadillo-dev libopenblas-dev liblapack-dev libgsl-dev python3-dev libeigen3-dev libtbb-dev
     # We will install latest CMake, even though Ubuntu has a recent one
     - mkdir -p $HOME/.local
     - curl -s "https://cmake.org/files/v3.23/cmake-3.23.1-linux-x86_64.tar.gz" | tar --strip-components=1 -xz -C $HOME/.local
     - export PATH=$HOME/.local/bin:$PATH

    script:
     - cmake -S . -B build -DTBB_TEST=FALSE
     - cmake --build build -v 

    artifacts:
      paths:
       - build
  

test:
    stage: test
    image: gcc
    before_script:
     - git submodule sync --recursive
     - git submodule update --init --recursive
     - apt-get update --yes
     - apt-get install --yes cmake libarmadillo-dev libopenblas-dev liblapack-dev libgsl-dev python3-dev libeigen3-dev libtbb-dev
     # We will install latest CMake, even though Ubuntu has a recent one
     - mkdir -p $HOME/.local
     - curl -s "https://cmake.org/files/v3.23/cmake-3.23.1-linux-x86_64.tar.gz" | tar --strip-components=1 -xz -C $HOME/.local
     - export PATH=$HOME/.local/bin:$PATH

    script:
    - cmake -S . -B build_test -DTBB_TEST=FALSE
    - cmake --build build_test -v
    - cmake --build build_test -t test

    artifacts:
      when: always
      reports:
        junit: build_test/tests/result.xml

benchmark:
    stage: .post
    image: gcc
    needs:
      job: build
      artifacts: true
    script:
     - cd build/benchmark
     - ./benchmarks --benchmark_out_format=json --benchmark_out=benchmark.json

    artifacts:
      when: always
      paths:
        - build/benchmark/benchmark.json
        - json

valgrind:
    stage: .post
    image: gcc
    needs: 
      job: build
      artifacts: true
    before_script:
     - apt-get update --yes
     - apt-get install --yes valgrind python3-pip libarmadillo10 libopenblas-base liblapack3 libgsl25 
     - pip install ValgrindCI

    script:
    - cd build/SteepestDescent
    - valgrind --xml=yes --xml-file=valgrind_report.xml ./SteepestDescent
    - valgrind-ci valgrind_report.xml --output-dir=../../html

    artifacts:
      when: always
      paths:
        - build/SteepestDescent/valgrind_report.xml
        - html
