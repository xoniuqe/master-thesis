# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/C++.gitlab-ci.yml

# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  
image: gcc
before_script:
 - apt-get update --yes
 - apt-get install --yes cmake build-essential gdb pkg-config
 - ls vcpkg
 - echo "calling vcpkg"
 - sh ./vcpkg/bootstrap-vcpkg.sh
 - sh ./vcpkg/vcpkg install gsl 

build:
  stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  # before_script:
  #   - apt update && apt -y install make autoconf
  script:
    - cmake -DCMAKE_TOOLCHAIN_FILE=./vcpkg/scripts/buildsystems/vcpkg.cmake --build build
   # - g++ helloworld.cpp -o mybinary
  artifacts:
    paths:
      - mybinary
      # depending on your build setup it's most likely a good idea to cache outputs to reduce the build time
      # cache:
      #   paths:
      #     - "*.o"

# run tests using the binary built before
#test:
#  stage: test
#  script:
#    - ./runmytests.sh
